// The default template attempts to follow the schema from
// https://github.com/olivierlacan/keep-a-changelog

export default class Default {
  logHeader = '# Change Log\nAll notable changes to this project will be documented in this file. This project adheres to [Semantic Versioning](http://semver.org/).\n\nGenerated by [auto-changelog](https://github.com/CookPete/auto-changelog)'

  unreleasedTitle = 'Unreleased'
  mergesTitle = 'Merged'
  fixesTitle = 'Fixed'
  commitsTitle = 'Commits'

  commitListLimit = 3
  commitHashLength = 7
  minimumChangeCount = 1 // Minimum number of changes to show per release

  sectionSpacing = '\n\n\n'
  listSpacing = '\n\n'

  constructor (origin) {
    this.origin = `https://${origin.hostname}/${origin.repo}`
  }

  render = (releases) => {
    return [
      this.logHeader,
      releases.map(this.renderRelease).join(this.sectionSpacing)
    ].join(this.sectionSpacing) + '\n'
  }

  renderRelease = (release, index, releases) => {
    const previousRelease = releases[index + 1]
    let log = [ this.renderReleaseHeading(release, previousRelease) ]
    const merges = this.renderMerges(release.merges)
    const fixes = this.renderFixes(release.fixes)
    log = log.concat(merges).concat(fixes)
    const backfillCount = this.minimumChangeCount - (release.merges.length + release.fixes.length)
    if (backfillCount > 0) {
      // Ignore some commit subjects because they exist in merges and fixes already
      const ignoreSubjects = [
        ...release.merges.map(merge => merge.message),
        ...release.fixes.map(fix => fix.commit.subject)
      ]
      log = log.concat(this.renderCommits(release.commits, backfillCount, ignoreSubjects))
    }
    return log.join(this.listSpacing)
  }

  renderReleaseHeading = (release, previousRelease) => {
    const title = this.renderReleaseTitle(release, previousRelease)
    const date = release.date ? ' - ' + this.formatDate(release.date) : ''
    return `## ${title}${date}`
  }

  renderReleaseTitle = (release, previousRelease) => {
    let heading = release.tag || this.unreleasedTitle
    if (previousRelease) {
      const href = this.renderCompareHref(this.origin, previousRelease.tag, release.tag)
      heading = `[${heading}](${href})`
    }
    return heading
  }

  renderCompareHref = (origin, fromTag, toTag = 'HEAD') => {
    if (/bitbucket\.com\//.test(origin)) {
      return `${origin}/compare/${toTag}%0D${fromTag}`
    }
    return `${origin}/compare/${fromTag}...${toTag}`
  }

  renderList = (title, list) => {
    const heading = title ? `### ${title}\n` : ''
    return heading + list
  }

  renderMerges = (merges) => {
    if (merges.length === 0) return []
    const list = merges.map(merge => {
      const href = merge.pr.replace('#', this.origin + '/pull/')
      return this.renderMerge({
        message: merge.message,
        link: `[\`${merge.pr}\`](${href})`
      })
    }).join('\n')
    return this.renderList(this.mergesTitle, list)
  }

  renderMerge = ({ message, link }) => {
    return `* ${message} ${link}`
  }

  renderFixes = (fixes) => {
    if (fixes.length === 0) return []
    const list = fixes
      .map(fix => this.renderFix({
        commit: fix.commit,
        links: fix.fixes.map(this.renderFixLink)
      }))
      .join('\n')
    return this.renderList(this.fixesTitle, list)
  }

  renderFix = ({ links, commit }) => {
    return `* ${commit.subject} ${links.join(', ')}`
  }

  renderFixLink = (string) => {
    const href = string.replace('#', this.origin + '/issues/')
    const number = string.replace(new RegExp(this.origin + '/issues/', 'i'), '#')
    return `[\`${number}\`](${href})`
  }

  renderCommits = (commits, limit, ignoreSubjects) => {
    if (commits.length === 0) return []
    limit = Math.min(limit, this.commitListLimit)
    const list = commits
      .filter(commit => ignoreSubjects.indexOf(commit.subject) === -1)
      .sort(this.sortCommits)
      .slice(0, limit)
      .map(commit => this.renderCommit({
        subject: commit.subject,
        link: this.renderCommitLink(commit)
      }))
      .join('\n')
    return this.renderList(this.commitsTitle, list)
  }

  renderCommit = ({ subject, link }) => {
    return `* ${subject} ${link}`
  }

  renderCommitLink = ({ hash }) => {
    const shortHash = hash.slice(0, this.commitHashLength)
    const href = `${this.origin}/commit/${hash}`
    return `[\`${shortHash}\`](${href})`
  }

  sortCommits = (a, b) => {
    // If we have to list commits, list the juicy ones first
    return b.insertions + b.deletions - a.insertions + a.deletions
  }

  formatDate = (date) => {
    return date.slice(0, 10)
  }
}
